@model IEnumerable<AdvertisingPortal.Core.Models.Domains.Advert>
@{
    ViewBag.Title = "Ogłoszenia na mapie";
}

<title>@ViewBag.Title</title>

<div id="map" style="height: 600px; width: 100%;"></div>

@section Scripts
    {
    <script type="text/javascript">

        (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
            key: "AIzaSyBsge03eTloN7UJTkkoNQ5yDemjr46mRdU",
            v: "weekly",
            // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
            // Add other bootstrap parameters as needed, using camel case.
            language: "pl",
            region: "PL",
            authReferrerPolicy: "origin",
        });

        let map;
        let marker;
        let geocoder;
        let responseDiv;
        let response;


        async function initMap() {

            const position = { lat: 50.03314208984375, lng: 19.931547164916992 };

            // Request needed libraries.
            const { Map } = await google.maps.importLibrary("maps");
            const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

            // The map, centered at
            map = new Map(document.getElementById("map"), {
                center: { lat: 50.03314208984375, lng: 19.931547164916992 },
                zoom: 13,
            });

            var geocoder = new google.maps.Geocoder();
            var infowindow = new google.maps.InfoWindow();

            var modelZipCodes = '@Html.Raw(Json.Serialize(Model.Select(x=>x.ZipCode)))';
            var advertsZipCode = JSON.parse(modelZipCodes);
            console.log(advertsZipCode);

            var modelImageData = '@Html.Raw(Json.Serialize(Model.Select(x=>x.Images).FirstOrDefault().Select(x=>x.Data)))';
            var advertsImageData = JSON.parse(modelImageData);

            var modelTitles = '@Html.Raw(Json.Serialize(Model.Select(x=>x.Title)))';
            var sanitizedModelTitles = modelTitles.replace(/[\u0000-\u0019]+/g, ""); // Replace control characters
            var advertsTitle = JSON.parse(sanitizedModelTitles);

            var modelIDs = '@Html.Raw(Json.Serialize(Model.Select(x=>x.Id)))';
            var advertsIDs = JSON.parse(modelIDs);

            var modelDescriptions = '@Html.Raw(Json.Serialize(Model.Select(x=>x.Description)))';
            let sanitizedModelDesc = modelDescriptions.replace(/[\u0000-\u0019]+/g, ""); // Replace control characters
            var advertsDescription = JSON.parse(sanitizedModelDesc);

            var modelPrices = '@Html.Raw(Json.Serialize(Model.Select(x=>x.Price)))';
            var advertsPrices = JSON.parse(modelPrices);

            //creating array for all markers data
            let arrayMarkers = [];
            let rows = advertsZipCode.length;


            for (let i = 0; i < rows; i++) {
                arrayMarkers[i] = [];
                arrayMarkers[i][0] = advertsZipCode[i];
                arrayMarkers[i][1] = advertsTitle[i];
                arrayMarkers[i][3] = advertsIDs[i];
                arrayMarkers[i][4] = advertsDescription[i];
                arrayMarkers[i][5] = advertsPrices[i];

                var base64 = btoa(String.fromCharCode.apply(null, advertsImageData));
                var img = "data:image/jpeg;base64," + base64;
                arrayMarkers[i][2] = img;

                console.log(arrayMarkers[i]);
            }

            for (let i = 0; i < arrayMarkers.length; i++) {

                var addressToGeocode = arrayMarkers[i][0];
                var img = arrayMarkers[i][2];

                geocoder.geocode({ address: addressToGeocode }, function (results, status) {
                    if (status === "OK") {
                        var location = results[0].geometry.location;

                        // Create a marker
                        var marker = new google.maps.Marker({
                            position: location,
                            map: map,
                            title: arrayMarkers[i][1],
                        });

                        google.maps.event.addListener(marker, "click", function () {
                            //infowindow.setContent(results[0].formatted_address);
                            infowindow.setContent('<img src="' + arrayMarkers[i][2] + '?auto=compress&cs=tinysrgb&h=350" style="width:128; height:96" /><br><br><a href=../Advert/Advert/' + arrayMarkers[i][3] + '>' + arrayMarkers[i][1] + '</a><br>' + arrayMarkers[i][4] + '<br><br><b>Cena:' + arrayMarkers[i][5] + '</b>');
                            infowindow.open(map, marker);
                        });

                    } else {
                        console.error("Geocode was not successful for the following reason: " + status);
                    }
                });

            }

            // advertsTitle.forEach(function (element) {
            //     console.log(element);
            // })

            // this is where the pin actually gets added to the map.
            // bounds.extend() takes in a map location object
            //bounds.extend(new google.maps.LatLng(lat, lng));
            //// fit the map to the new marker
            //map.fitBounds(bounds);
            //// center the map
            //map.setCenter(bounds.getCenter());
            //
            //// Sets the boundaries of the map based on pin locations
            //window.mapBounds = new google.maps.LatLngBounds();

        }

        initMap();

    </script>
    }